ಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥಥ_ಥ
class Checks {
    static Ball ball;
    static Paddle paddle;
    static Counter counter;
    static Bricks bricks;
    static int speed, posX, posY, speedX, speedY;
    static int bricksInRowCount, rowsCount, ballRadius, brickHeight, brickWidth;
	static int ballOffset, brickOffset;


    //инициализируем все нужные переменные для проверок 
	function void init(Ball _ball, Counter _counter, Paddle _paddle, int _speed, Bricks _bricks, int _rowsCount) {
        let ball = _ball;
        let counter = _counter;
        let paddle = _paddle;
        let bricks = _bricks;
        let speed = _speed;
        let bricksInRowCount = 17;
        let rowsCount = _rowsCount;
        let brickHeight = Constants.getBrickHeight();
		let brickWidth = Constants.getBrickWidth();
		let ballRadius = Constants.getBallRadius();
		let posX = ball.getX();
		let posY = ball.getY();
		let speedX = ball.getSpeedX();
		let speedY = ball.getSpeedY();
		let ballOffset = 2;
		let brickOffset = 5;
		return;
	}

    // Проверка столкновения мяча с платформой
	function void checkPaddleCollision() {
		var int paddleX, paddleY;
		
		let paddleX = paddle.getX();
		let paddleY = paddle.getY();

		if ((posY > (paddleY - speedY)) & (posY < (paddleY + speedY)) & (posX > (paddleX - 5)) & (posX < (paddleX + 25))) {
			let speedY = -speedY;
			do ball.setSpeedY(speedY);
		}				
		return;
	}

	// Проверка столкновения мяча с блоком
	function void checkBrickCollision() {
		var int i, j;
		var Brick brick;
		var int brickX, brickY;
		var int nextPosX, nextPosY;
		var int brickWidthWithOffset, brickHeightWithOffset, ballRadiusWithOffset;

		if (bricks = null) { return; }

		let brickHeightWithOffset = brickHeight + brickOffset;
		let brickWidthWithOffset = brickWidth + brickOffset;
		let ballRadiusWithOffset = ballRadius + ballOffset;

		let j = 0;
		while (j < rowsCount) {
			let i = 0;
			while (i < bricksInRowCount) {
				let brick = bricks[i + (j * bricksInRowCount)];

				if (~(brick = null) & ~(bricks = null)) {
					let brickX = brick.getX();
					let brickY = brick.getY();

					let nextPosX = posX + speedX;
					let nextPosY = posY + speedY;

					if ((((nextPosY + ballRadiusWithOffset) > brickY) & ((nextPosY - ballRadiusWithOffset) < (brickY + brickHeightWithOffset)) & 
						((nextPosX + ballRadiusWithOffset) > brickX) & ((nextPosX - ballRadiusWithOffset) < (brickX + brickWidthWithOffset)))) {

						do ball.setSpeedY(-speedY);

						do brick.erase();
						do brick.dispose();

						do counter.add();

						let bricks[i + (j * bricksInRowCount)] = null;
					}
				}
				let i = i + 1;
			}
			let j = j + 1;
		}
		return;
	}
}